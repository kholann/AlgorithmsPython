# 1. Проанализировать скорость и сложность одного любого алгоритма,
# разработанного в рамках домашнего задания первых трех уроков.
# Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

import cProfile
import random

# по 7 задаче из 3 урока:
# 7. В одномерном массиве целых чисел определить два наименьших элемента.
# Они могут быть как равны между собой (оба являться минимальными), так и различаться.

def main():
    array_random = [random.randint(0, 99) for _ in range(1000)]
    print(f'Массив: {array_random}')
    sort_list = []
    sort_list.extend(array_random)
    sort_list.sort()

    print(f'Два наименьших элемента: {sort_list[0]} и {sort_list[1]}')

cProfile.run('main()')

# Скорость алгоритма:
# /usr/local/bin/python3.9 "/Users/kholann/Desktop/NLP/Алгоритмы и структуры данных на python/python/AlgorithmsPython/lesson4/task1.py"
# Массив: [10, 58, 83, 18, 99, 89, 90, 96, 19, 19, 10, 41, 51, 3, 74, 55, 77, 22, 66, 99, 55, 27, 23, 25, 66, 95, 35, 40, 99, 82, 33, 82, 54, 76, 72, 60, 78, 76, 4, 98, 35, 88, 32, 39, 38, 83, 38, 56, 25, 22, 51, 56, 4, 12, 56, 50, 42, 79, 59, 41, 1, 51, 12, 52, 93, 9, 23, 18, 70, 75, 90, 50, 55, 53, 62, 23, 55, 16, 43, 87, 73, 21, 56, 56, 27, 25, 97, 78, 58, 27, 28, 46, 75, 17, 86, 27, 86, 34, 4, 45, 35, 71, 82, 76, 11, 22, 28, 80, 68, 78, 13, 71, 58, 53, 93, 2, 62, 75, 53, 59, 65, 44, 47, 97, 58, 16, 43, 37, 93, 69, 23, 68, 60, 15, 83, 43, 11, 31, 81, 19, 34, 56, 21, 61, 51, 27, 67, 90, 10, 96, 73, 58, 35, 43, 30, 7, 3, 2, 50, 58, 91, 55, 37, 90, 32, 71, 64, 37, 49, 84, 28, 64, 26, 53, 46, 70, 23, 6, 54, 91, 43, 40, 30, 24, 4, 39, 79, 81, 77, 17, 95, 94, 82, 42, 0, 36, 7, 9, 92, 34, 63, 34, 56, 7, 95, 60, 38, 66, 12, 63, 58, 73, 99, 73, 91, 78, 7, 19, 53, 42, 86, 1, 29, 65, 37, 2, 15, 80, 87, 99, 8, 92, 18, 86, 40, 66, 23, 85, 40, 99, 11, 92, 75, 86, 59, 64, 17, 48, 64, 4, 5, 55, 29, 42, 29, 28, 40, 25, 32, 24, 14, 77, 19, 86, 84, 85, 15, 16, 64, 17, 89, 60, 78, 45, 48, 58, 69, 84, 79, 91, 3, 83, 65, 56, 40, 88, 79, 73, 59, 86, 41, 66, 70, 14, 24, 64, 84, 15, 69, 66, 1, 3, 33, 83, 12, 84, 5, 73, 52, 74, 93, 25, 76, 45, 50, 3, 93, 23, 68, 91, 53, 87, 81, 60, 61, 30, 75, 4, 59, 88, 98, 44, 32, 48, 46, 8, 91, 16, 29, 49, 61, 32, 28, 29, 5, 38, 60, 78, 95, 34, 7, 16, 56, 72, 66, 18, 87, 8, 79, 42, 18, 32, 14, 40, 73, 39, 66, 75, 99, 43, 58, 12, 91, 86, 51, 91, 43, 17, 40, 92, 31, 18, 98, 72, 92, 40, 7, 73, 13, 66, 29, 72, 12, 87, 20, 91, 57, 11, 72, 71, 11, 39, 36, 25, 70, 11, 26, 19, 15, 13, 54, 25, 23, 51, 92, 0, 37, 91, 76, 37, 61, 91, 21, 69, 75, 95, 65, 50, 84, 86, 24, 25, 79, 61, 50, 55, 89, 15, 73, 34, 61, 15, 44, 60, 78, 87, 28, 94, 98, 96, 26, 12, 72, 23, 66, 20, 47, 58, 57, 67, 7, 82, 47, 15, 52, 19, 97, 63, 82, 77, 86, 92, 41, 70, 59, 37, 21, 43, 4, 2, 24, 48, 9, 87, 91, 42, 23, 66, 83, 96, 54, 97, 75, 32, 84, 39, 41, 39, 35, 73, 29, 55, 76, 94, 4, 78, 52, 90, 33, 87, 76, 46, 51, 70, 37, 22, 69, 98, 89, 72, 74, 43, 88, 48, 41, 46, 76, 7, 59, 54, 82, 85, 80, 4, 19, 37, 47, 15, 70, 3, 54, 13, 77, 59, 75, 52, 92, 80, 57, 52, 42, 25, 21, 33, 84, 18, 24, 11, 0, 77, 96, 60, 53, 56, 19, 83, 71, 54, 17, 77, 78, 60, 55, 45, 39, 30, 42, 27, 22, 45, 47, 50, 64, 22, 51, 68, 52, 0, 57, 59, 48, 77, 21, 55, 17, 50, 96, 90, 49, 28, 52, 53, 3, 11, 13, 12, 59, 19, 14, 42, 73, 48, 11, 10, 69, 57, 37, 19, 26, 41, 26, 58, 68, 71, 47, 58, 30, 43, 8, 29, 30, 25, 95, 65, 85, 12, 75, 48, 71, 42, 36, 14, 9, 21, 40, 86, 86, 18, 69, 45, 17, 48, 20, 57, 55, 12, 67, 62, 84, 60, 45, 32, 46, 44, 37, 77, 76, 39, 75, 31, 70, 48, 72, 38, 20, 39, 21, 69, 98, 95, 30, 94, 29, 69, 6, 30, 86, 30, 17, 44, 27, 90, 58, 87, 10, 91, 73, 47, 76, 83, 92, 55, 60, 17, 67, 91, 36, 90, 29, 76, 52, 81, 7, 64, 34, 65, 67, 58, 1, 82, 98, 4, 20, 83, 75, 34, 51, 90, 64, 69, 80, 47, 18, 14, 35, 61, 80, 98, 31, 78, 23, 3, 89, 25, 40, 41, 98, 20, 83, 6, 95, 93, 37, 67, 16, 57, 43, 25, 39, 39, 50, 74, 54, 5, 17, 53, 94, 75, 75, 14, 43, 63, 38, 70, 97, 26, 12, 18, 9, 31, 64, 51, 29, 41, 65, 55, 66, 80, 43, 27, 37, 17, 74, 17, 0, 65, 75, 15, 80, 20, 39, 87, 41, 51, 39, 67, 2, 35, 55, 89, 28, 63, 29, 94, 36, 27, 42, 54, 30, 73, 92, 68, 67, 54, 1, 53, 6, 22, 15, 87, 35, 36, 60, 80, 56, 22, 68, 62, 81, 59, 77, 34, 92, 97, 68, 59, 1, 76, 1, 65, 72, 20, 83, 30, 95, 35, 78, 73, 65, 30, 14, 6, 91, 28, 91, 1, 57, 30, 77, 93, 68, 66, 44, 21, 83, 90, 87, 25, 75, 12, 73, 55, 75, 6, 78, 24, 65, 46, 10, 97, 65, 70, 35, 51, 63, 29, 77, 66, 28, 93, 62, 2, 21, 14, 2, 84, 96, 4, 17, 93, 14, 57, 13, 19, 96, 61, 35, 57, 41, 41, 15, 39, 99, 48, 2, 40, 96, 7, 4, 28, 8, 86, 86, 47, 99, 52, 88, 40, 1, 46, 73, 25, 17, 74, 32, 79, 59, 60, 62, 85, 7, 1, 8, 70, 85, 44, 7, 97, 25, 28, 47, 79, 50, 59, 54, 78, 48, 59, 17, 7, 26, 83, 95, 51, 14, 52, 0, 66, 2, 36, 83, 61, 83, 78, 1, 40, 4, 62, 77, 73, 8, 13, 30, 32, 15, 66, 44, 16, 71, 40]
# Два наименьших элемента: 0 и 0
#          5280 function calls in 0.003 seconds
#
#    Ordered by: standard name
#
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    0.000    0.000    0.003    0.003 <string>:1(<module>)
#      1000    0.001    0.000    0.001    0.000 random.py:237(_randbelow_with_getrandbits)
#      1000    0.001    0.000    0.002    0.000 random.py:290(randrange)
#      1000    0.000    0.000    0.002    0.000 random.py:334(randint)
#         1    0.000    0.000    0.003    0.003 task1.py:12(main)
#         1    0.000    0.000    0.002    0.002 task1.py:13(<listcomp>)
#         1    0.000    0.000    0.003    0.003 {built-in method builtins.exec}
#         2    0.000    0.000    0.000    0.000 {built-in method builtins.print}
#      1000    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#         1    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
#      1271    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
#         1    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
#
#
#
# Process finished with exit code 0

# Сложность алгоритма линейная O(n), зависит от количества элементов n в массиве.
