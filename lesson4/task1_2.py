# 1. Проанализировать скорость и сложность одного любого алгоритма,
# разработанного в рамках домашнего задания первых трех уроков.
# Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их (2 реализация).

import cProfile
import random

# по 7 задаче из 3 урока:
# 7. В одномерном массиве целых чисел определить два наименьших элемента.
# Они могут быть как равны между собой (оба являться минимальными), так и различаться.

def main():
    numb = [random.randint(0, 99) for _ in range(1000)]
    min_el = numb[1]
    prev_min = numb[0]

    for num in numb:
        if num <= min_el:
            prev_min = min_el
            min_el = num
        elif num <= prev_min:
            prev_min = num

    print(f'В массиве: \n{numb} \nминимальные элементы: {min_el} и {prev_min}')

cProfile.run('main()')

# Скорость алгоритма:
# /usr/local/bin/python3.9 "/Users/kholann/Desktop/NLP/Алгоритмы и структуры данных на python/python/AlgorithmsPython/lesson4/task1_2.py"
# В массиве:
# [16, 95, 44, 8, 75, 32, 94, 45, 98, 75, 44, 82, 14, 20, 71, 65, 25, 51, 9, 13, 4, 37, 20, 74, 43, 8, 39, 90, 38, 79, 49, 43, 49, 55, 6, 86, 24, 9, 2, 76, 75, 45, 37, 88, 86, 83, 38, 82, 14, 38, 30, 75, 24, 79, 64, 40, 85, 95, 75, 52, 98, 35, 16, 11, 60, 53, 12, 11, 3, 17, 48, 41, 8, 48, 48, 29, 73, 97, 59, 15, 65, 69, 83, 6, 98, 52, 57, 43, 88, 21, 8, 23, 3, 12, 20, 28, 86, 19, 58, 93, 19, 35, 21, 51, 90, 32, 72, 51, 52, 38, 97, 51, 59, 23, 18, 6, 70, 63, 65, 11, 96, 91, 77, 59, 69, 95, 88, 80, 70, 15, 49, 94, 4, 3, 28, 18, 51, 98, 46, 47, 77, 36, 92, 1, 78, 0, 3, 83, 34, 36, 75, 77, 78, 25, 45, 10, 9, 59, 70, 1, 3, 2, 59, 41, 97, 12, 87, 57, 10, 84, 96, 62, 8, 39, 33, 57, 98, 89, 19, 41, 80, 53, 17, 71, 62, 20, 1, 50, 31, 92, 26, 38, 39, 82, 39, 32, 47, 23, 64, 94, 18, 86, 30, 29, 76, 67, 55, 13, 48, 15, 65, 29, 1, 3, 97, 13, 38, 20, 62, 50, 40, 75, 77, 92, 84, 31, 92, 45, 21, 22, 74, 12, 25, 30, 34, 56, 18, 42, 3, 33, 28, 63, 28, 35, 32, 49, 72, 66, 80, 20, 30, 11, 68, 42, 94, 2, 51, 49, 76, 34, 8, 90, 26, 17, 69, 37, 30, 50, 16, 82, 0, 72, 44, 95, 11, 59, 93, 0, 25, 14, 67, 19, 41, 63, 24, 44, 1, 83, 28, 14, 68, 42, 82, 19, 28, 8, 50, 31, 93, 10, 30, 17, 30, 55, 81, 16, 92, 34, 10, 62, 29, 43, 96, 73, 31, 56, 64, 63, 91, 70, 52, 92, 34, 72, 98, 28, 34, 70, 63, 49, 65, 61, 81, 39, 43, 90, 58, 82, 33, 84, 56, 31, 23, 34, 84, 65, 33, 84, 31, 73, 85, 89, 3, 94, 46, 51, 91, 23, 1, 21, 80, 89, 30, 56, 56, 54, 88, 79, 84, 76, 84, 5, 69, 65, 94, 86, 59, 72, 80, 93, 88, 80, 83, 93, 85, 5, 4, 85, 54, 49, 11, 17, 46, 87, 85, 90, 38, 87, 20, 81, 32, 72, 53, 43, 66, 82, 4, 59, 16, 25, 89, 26, 53, 83, 41, 85, 75, 3, 1, 0, 46, 47, 11, 29, 30, 32, 3, 65, 63, 36, 63, 98, 57, 36, 67, 40, 18, 68, 12, 73, 83, 37, 90, 26, 36, 11, 50, 68, 6, 82, 23, 49, 28, 86, 34, 18, 56, 69, 61, 25, 50, 32, 63, 67, 47, 68, 45, 60, 39, 77, 9, 60, 51, 71, 53, 0, 51, 66, 9, 30, 31, 82, 48, 78, 48, 29, 42, 42, 67, 42, 25, 91, 37, 51, 69, 15, 59, 11, 44, 61, 13, 89, 58, 44, 64, 33, 94, 94, 17, 12, 89, 50, 99, 66, 27, 91, 26, 21, 88, 72, 75, 55, 26, 51, 61, 4, 83, 29, 74, 95, 22, 22, 36, 58, 19, 96, 25, 4, 47, 64, 66, 85, 76, 0, 1, 29, 67, 4, 16, 40, 10, 43, 16, 98, 52, 44, 25, 59, 91, 87, 11, 16, 68, 13, 57, 94, 79, 51, 22, 58, 83, 76, 0, 9, 50, 2, 78, 66, 62, 59, 87, 89, 23, 32, 87, 99, 77, 2, 68, 6, 37, 55, 70, 57, 45, 62, 0, 75, 16, 63, 93, 85, 60, 40, 49, 90, 77, 88, 67, 64, 30, 96, 36, 68, 3, 28, 21, 47, 39, 39, 79, 97, 19, 32, 47, 49, 54, 13, 46, 78, 85, 67, 52, 93, 22, 7, 1, 92, 4, 68, 51, 43, 2, 26, 5, 96, 77, 92, 24, 91, 99, 63, 76, 73, 63, 16, 11, 94, 14, 47, 66, 79, 27, 82, 36, 68, 66, 94, 88, 26, 5, 56, 66, 31, 74, 55, 47, 3, 96, 43, 5, 79, 68, 49, 73, 42, 17, 55, 33, 64, 59, 82, 30, 14, 95, 0, 17, 75, 55, 73, 8, 47, 16, 55, 92, 51, 79, 68, 60, 71, 87, 19, 63, 50, 85, 60, 18, 11, 6, 40, 23, 84, 91, 77, 35, 58, 80, 33, 61, 60, 83, 15, 4, 74, 30, 51, 59, 74, 31, 25, 4, 86, 93, 24, 74, 15, 76, 35, 66, 77, 12, 96, 71, 15, 97, 43, 57, 49, 99, 92, 34, 74, 91, 77, 48, 85, 27, 17, 73, 84, 57, 69, 89, 44, 77, 0, 62, 79, 38, 31, 76, 5, 8, 6, 49, 42, 59, 49, 57, 44, 13, 9, 26, 36, 8, 13, 78, 71, 67, 65, 61, 19, 83, 84, 63, 31, 72, 87, 42, 10, 91, 86, 39, 73, 63, 44, 66, 74, 60, 12, 56, 88, 44, 2, 12, 58, 0, 29, 35, 76, 5, 88, 10, 89, 97, 57, 12, 34, 69, 80, 74, 12, 97, 6, 96, 1, 3, 42, 37, 44, 62, 12, 39, 62, 15, 41, 69, 89, 60, 89, 44, 16, 9, 93, 57, 28, 73, 75, 28, 94, 18, 19, 30, 40, 97, 87, 6, 73, 62, 63, 52, 69, 73, 14, 65, 98, 86, 50, 99, 99, 82, 12, 17, 59, 62, 41, 40, 59, 95, 16, 84, 83, 8, 75, 74, 87, 97, 17, 76, 10, 51, 27, 99, 70, 43, 7, 17, 21, 20, 31, 74, 87, 82, 52, 69, 29, 38, 10, 47, 2, 24, 51, 52, 95, 67, 74, 31, 86, 25, 71, 95, 31, 7, 80, 41, 48, 26, 30, 70, 0, 27, 74, 42, 31, 15, 74, 0, 53, 73, 53, 54, 25, 54, 36, 95, 21, 9, 51, 86, 66, 55, 60, 67, 44, 72, 12, 9, 1, 32, 50, 31, 6, 41, 12, 95, 39, 67, 5, 41, 16, 0, 57, 69, 20, 54, 58, 24, 62, 81, 59]
# минимальные элементы: 0 и 0
#          5304 function calls in 0.002 seconds
#
#    Ordered by: standard name
#
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    0.000    0.000    0.002    0.002 <string>:1(<module>)
#      1000    0.001    0.000    0.001    0.000 random.py:237(_randbelow_with_getrandbits)
#      1000    0.001    0.000    0.002    0.000 random.py:290(randrange)
#      1000    0.000    0.000    0.002    0.000 random.py:334(randint)
#         1    0.000    0.000    0.002    0.002 task1_2.py:12(main)
#         1    0.000    0.000    0.002    0.002 task1_2.py:13(<listcomp>)
#         1    0.000    0.000    0.002    0.002 {built-in method builtins.exec}
#         1    0.000    0.000    0.000    0.000 {built-in method builtins.print}
#      1000    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#      1298    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
#
#
#
# Process finished with exit code 0

# Данная реализация получилась быстрее: 5304 function calls in 0.002 seconds, чем первая реализация:
# 5280 function calls in 0.003 seconds

# Сложность алгоритма линейная O(n), зависит от количества элементов n в массиве.
